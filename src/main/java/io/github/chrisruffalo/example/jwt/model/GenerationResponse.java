package io.github.chrisruffalo.example.jwt.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import io.github.chrisruffalo.example.jwt.service.AccessGenerationService;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

/**
 * This is the response generated by the generation service.
 */
public class GenerationResponse {

    /**
     * This is the access token that will be presented as the "sub" or subject of
     * any access request made to the API.
     */
    private String accessToken;

    /**
     * This is the private key that the clients must use to sign their access
     * requests.
     */
    private String privateKey;

    /**
     * The public key is added to the generation response but is not serialized
     * back to the client. This is an implementation choice. Serializing this
     * back would allow the client to verify their signatures but the public key
     * can also be derived from the private key if desired.
     */
    @JsonIgnore
    private String publicKey;

    public String getPublicKey() {
        return publicKey;
    }

    public void setPublicKey(String publicKey) {
        this.publicKey = publicKey;
    }

    public String getPrivateKey() {
        return privateKey;
    }

    public void setPrivateKey(String privateKey) {
        this.privateKey = privateKey;
    }

    public String getAccessToken() {
        return accessToken;
    }

    public void setAccessToken(String accessToken) {
        this.accessToken = accessToken;
    }

    /**
     * Utility method to get a PrivateKey object from the base64 encoded string.
     *
     * @param privateKeyBase64String the PEM/base64 encoded private key
     * @return an object instance of the PrivateKey
     */
    public static PrivateKey getPrivateKey(final String privateKeyBase64String) {
        try {
            return KeyFactory.getInstance(AccessGenerationService.ALGO).generatePrivate(new PKCS8EncodedKeySpec(Base64.getDecoder().decode(privateKeyBase64String)));
        } catch (InvalidKeySpecException | NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
}
